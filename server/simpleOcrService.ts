import fs from 'fs';
import { spawn } from 'child_process';

interface SimpleOcrResult {
  success: boolean;
  extractedText: string;
  method: string;
  error?: string;
}

export class SimpleOcrService {
  
  async extractTextFromPdf(filePath: string): Promise<SimpleOcrResult> {
    try {
      // First try pdftotext if available
      const pdfTextResult = await this.tryPdfToText(filePath);
      if (pdfTextResult.success && pdfTextResult.extractedText.length > 50) {
        return pdfTextResult;
      }

      // Fallback to manual PDF parsing with better text extraction
      const manualResult = await this.tryManualPdfParsing(filePath);
      if (manualResult.success) {
        return manualResult;
      }

      // If all else fails, return structured analysis
      return {
        success: false,
        extractedText: '',
        method: 'fallback',
        error: 'Could not extract text from scanned PDF'
      };

    } catch (error) {
      return {
        success: false,
        extractedText: '',
        method: 'error',
        error: (error as Error).message
      };
    }
  }

  private async tryPdfToText(filePath: string): Promise<SimpleOcrResult> {
    return new Promise((resolve) => {
      const pdftotext = spawn('pdftotext', [filePath, '-'], {
        stdio: ['ignore', 'pipe', 'pipe']
      });

      let output = '';
      let errorOutput = '';

      pdftotext.stdout.on('data', (data) => {
        output += data.toString();
      });

      pdftotext.stderr.on('data', (data) => {
        errorOutput += data.toString();
      });

      pdftotext.on('close', (code) => {
        if (code === 0 && output.trim().length > 0) {
          resolve({
            success: true,
            extractedText: output.trim(),
            method: 'pdftotext'
          });
        } else {
          resolve({
            success: false,
            extractedText: '',
            method: 'pdftotext',
            error: errorOutput || `Exit code: ${code}`
          });
        }
      });

      pdftotext.on('error', (error) => {
        resolve({
          success: false,
          extractedText: '',
          method: 'pdftotext',
          error: error.message
        });
      });
    });
  }

  private async tryManualPdfParsing(filePath: string): Promise<SimpleOcrResult> {
    try {
      // Use pdf-parse with better error handling
      const pdf = await import('pdf-parse');
      const dataBuffer = fs.readFileSync(filePath);
      
      const data = await pdf.default(dataBuffer, {
        max: 0, // Parse all pages
        version: 'v1.10.100'
      });

      if (data.text && data.text.trim().length > 5) {
        return {
          success: true,
          extractedText: data.text.trim(),
          method: 'pdf-parse'
        };
      } else {
        return {
          success: false,
          extractedText: '',
          method: 'pdf-parse',
          error: 'No text content found in PDF'
        };
      }
    } catch (error) {
      return {
        success: false,
        extractedText: '',
        method: 'pdf-parse',
        error: (error as Error).message
      };
    }
  }

  // Generate structured content for Bill of Exchange when OCR fails
  generateBillOfExchangeStructure(filename: string, fileSize: number): string {
    return `BILL OF EXCHANGE - SCANNED DOCUMENT ANALYSIS

File: ${filename}
File Size: ${fileSize} bytes
Document Type: Bill of Exchange
Processing Date: ${new Date().toISOString()}

DOCUMENT CONTENT ANALYSIS:
This is a scanned Bill of Exchange document. Due to the image-based format, 
text extraction requires specialized OCR processing.

TYPICAL BILL OF EXCHANGE FIELDS:
- Reference Number: [Requires OCR for extraction]
- Date of Issue: [Requires OCR for extraction]
- Amount: [Requires OCR for extraction]
- Currency: [Requires OCR for extraction]
- Drawer (Issuer): [Requires OCR for extraction]
- Drawee (Payer): [Requires OCR for extraction]
- Payee (Beneficiary): [Requires OCR for extraction]
- Maturity Date: [Requires OCR for extraction]
- Place of Payment: [Requires OCR for extraction]
- Terms and Conditions: [Requires OCR for extraction]

DOCUMENT SIGNIFICANCE:
A Bill of Exchange is a negotiable instrument used in international trade finance.
It serves as an unconditional order directing one party to pay a specific amount
to another party at a predetermined date.

PROCESSING STATUS:
- File successfully uploaded and stored
- Document classified as Bill of Exchange
- Image-based content detected
- Professional OCR service required for complete text extraction

RECOMMENDATION:
For complete field extraction from this scanned document, consider using
advanced OCR services like Azure Document Intelligence or similar tools
specifically designed for financial document processing.

Generated by Trade Finance Forms Recognition System`;
  }
}

export const simpleOcrService = new SimpleOcrService();